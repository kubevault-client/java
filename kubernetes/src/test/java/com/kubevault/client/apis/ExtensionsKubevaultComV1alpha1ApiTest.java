/*
 * KubeVault
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.1.0
 * Contact: kubevault@appscode.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kubevault.client.apis;

import com.kubevault.client.ApiException;
import io.kubernetes.client.models.V1APIResourceList;
import io.kubernetes.client.models.V1DeleteOptions;
import io.kubernetes.client.models.V1Status;
import com.kubevault.client.models.V1alpha1VaultSecret;
import com.kubevault.client.models.V1alpha1VaultSecretList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExtensionsKubevaultComV1alpha1Api
 */
@Ignore
public class ExtensionsKubevaultComV1alpha1ApiTest {

    private final ExtensionsKubevaultComV1alpha1Api api = new ExtensionsKubevaultComV1alpha1Api();

    
    /**
     * 
     *
     * delete a VaultSecret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedVaultSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedVaultSecret(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAPIResourcesTest() throws ApiException {
        V1APIResourceList response = api.getAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind VaultSecret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedVaultSecretTest() throws ApiException {
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1VaultSecretList response = api.listNamespacedVaultSecret(namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list objects of kind VaultSecret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVaultSecretForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1VaultSecretList response = api.listVaultSecretForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified VaultSecret
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedVaultSecretTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1VaultSecret response = api.readNamespacedVaultSecret(name, namespace, pretty);

        // TODO: test validations
    }
    
}
