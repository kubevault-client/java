/*
 * KubeVault
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.1.0
 * Contact: kubevault@appscode.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kubevault.client.apis;

import com.kubevault.client.ApiException;
import io.kubernetes.client.models.V1APIResourceList;
import io.kubernetes.client.models.V1DeleteOptions;
import io.kubernetes.client.models.V1Status;
import com.kubevault.client.models.V1alpha1VaultServer;
import com.kubevault.client.models.V1alpha1VaultServerList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CoreKubevaultComV1alpha1Api
 */
@Ignore
public class CoreKubevaultComV1alpha1ApiTest {

    private final CoreKubevaultComV1alpha1Api api = new CoreKubevaultComV1alpha1Api();

    
    /**
     * 
     *
     * create a VaultServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedVaultServerTest() throws ApiException {
        String namespace = null;
        V1alpha1VaultServer body = null;
        String pretty = null;
        V1alpha1VaultServer response = api.createNamespacedVaultServer(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of VaultServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedVaultServerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedVaultServer(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a VaultServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedVaultServerTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedVaultServer(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAPIResourcesTest() throws ApiException {
        V1APIResourceList response = api.getAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind VaultServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedVaultServerTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1VaultServerList response = api.listNamespacedVaultServer(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind VaultServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVaultServerForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1VaultServerList response = api.listVaultServerForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified VaultServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedVaultServerTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1VaultServer response = api.patchNamespacedVaultServer(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified VaultServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedVaultServerTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1VaultServer response = api.readNamespacedVaultServer(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified VaultServer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedVaultServerTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1VaultServer body = null;
        String pretty = null;
        V1alpha1VaultServer response = api.replaceNamespacedVaultServer(name, namespace, body, pretty);

        // TODO: test validations
    }
    
}
