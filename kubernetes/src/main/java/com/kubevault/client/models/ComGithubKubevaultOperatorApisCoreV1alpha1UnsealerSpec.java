/*
 * KubeVault
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.1.0
 * Contact: kubevault@appscode.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kubevault.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kubevault.client.models.ComGithubKubevaultOperatorApisCoreV1alpha1ModeSpec;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UnsealerSpec contain the configuration for auto vault initialize/unseal
 */
@ApiModel(description = "UnsealerSpec contain the configuration for auto vault initialize/unseal")

public class ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec {
  @SerializedName("insecureTLS")
  private Boolean insecureTLS = null;

  @SerializedName("mode")
  private ComGithubKubevaultOperatorApisCoreV1alpha1ModeSpec mode = null;

  @SerializedName("overwriteExisting")
  private Boolean overwriteExisting = null;

  @SerializedName("retryPeriodSeconds")
  private Long retryPeriodSeconds = null;

  @SerializedName("secretShares")
  private Integer secretShares = null;

  @SerializedName("secretThreshold")
  private Integer secretThreshold = null;

  @SerializedName("storeRootToken")
  private Boolean storeRootToken = null;

  @SerializedName("vaultCASecret")
  private String vaultCASecret = null;

  public ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec insecureTLS(Boolean insecureTLS) {
    this.insecureTLS = insecureTLS;
    return this;
  }

   /**
   * To skip tls verification when communicating with vault server
   * @return insecureTLS
  **/
  @ApiModelProperty(value = "To skip tls verification when communicating with vault server")
  public Boolean isInsecureTLS() {
    return insecureTLS;
  }

  public void setInsecureTLS(Boolean insecureTLS) {
    this.insecureTLS = insecureTLS;
  }

  public ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec mode(ComGithubKubevaultOperatorApisCoreV1alpha1ModeSpec mode) {
    this.mode = mode;
    return this;
  }

   /**
   * mode contains unseal mechanism
   * @return mode
  **/
  @ApiModelProperty(value = "mode contains unseal mechanism")
  public ComGithubKubevaultOperatorApisCoreV1alpha1ModeSpec getMode() {
    return mode;
  }

  public void setMode(ComGithubKubevaultOperatorApisCoreV1alpha1ModeSpec mode) {
    this.mode = mode;
  }

  public ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec overwriteExisting(Boolean overwriteExisting) {
    this.overwriteExisting = overwriteExisting;
    return this;
  }

   /**
   * overwrite existing unseal keys and root tokens, possibly dangerous!
   * @return overwriteExisting
  **/
  @ApiModelProperty(value = "overwrite existing unseal keys and root tokens, possibly dangerous!")
  public Boolean isOverwriteExisting() {
    return overwriteExisting;
  }

  public void setOverwriteExisting(Boolean overwriteExisting) {
    this.overwriteExisting = overwriteExisting;
  }

  public ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec retryPeriodSeconds(Long retryPeriodSeconds) {
    this.retryPeriodSeconds = retryPeriodSeconds;
    return this;
  }

   /**
   * How often to attempt to unseal the vault instance
   * @return retryPeriodSeconds
  **/
  @ApiModelProperty(value = "How often to attempt to unseal the vault instance")
  public Long getRetryPeriodSeconds() {
    return retryPeriodSeconds;
  }

  public void setRetryPeriodSeconds(Long retryPeriodSeconds) {
    this.retryPeriodSeconds = retryPeriodSeconds;
  }

  public ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec secretShares(Integer secretShares) {
    this.secretShares = secretShares;
    return this;
  }

   /**
   * Total count of secret shares that exist
   * @return secretShares
  **/
  @ApiModelProperty(value = "Total count of secret shares that exist")
  public Integer getSecretShares() {
    return secretShares;
  }

  public void setSecretShares(Integer secretShares) {
    this.secretShares = secretShares;
  }

  public ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec secretThreshold(Integer secretThreshold) {
    this.secretThreshold = secretThreshold;
    return this;
  }

   /**
   * Minimum required secret shares to unseal
   * @return secretThreshold
  **/
  @ApiModelProperty(value = "Minimum required secret shares to unseal")
  public Integer getSecretThreshold() {
    return secretThreshold;
  }

  public void setSecretThreshold(Integer secretThreshold) {
    this.secretThreshold = secretThreshold;
  }

  public ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec storeRootToken(Boolean storeRootToken) {
    this.storeRootToken = storeRootToken;
    return this;
  }

   /**
   * should the root token be stored in the key store (default true)
   * @return storeRootToken
  **/
  @ApiModelProperty(value = "should the root token be stored in the key store (default true)")
  public Boolean isStoreRootToken() {
    return storeRootToken;
  }

  public void setStoreRootToken(Boolean storeRootToken) {
    this.storeRootToken = storeRootToken;
  }

  public ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec vaultCASecret(String vaultCASecret) {
    this.vaultCASecret = vaultCASecret;
    return this;
  }

   /**
   * Secret name containing self signed ca cert of vault
   * @return vaultCASecret
  **/
  @ApiModelProperty(value = "Secret name containing self signed ca cert of vault")
  public String getVaultCASecret() {
    return vaultCASecret;
  }

  public void setVaultCASecret(String vaultCASecret) {
    this.vaultCASecret = vaultCASecret;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec comGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec = (ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec) o;
    return Objects.equals(this.insecureTLS, comGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec.insecureTLS) &&
        Objects.equals(this.mode, comGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec.mode) &&
        Objects.equals(this.overwriteExisting, comGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec.overwriteExisting) &&
        Objects.equals(this.retryPeriodSeconds, comGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec.retryPeriodSeconds) &&
        Objects.equals(this.secretShares, comGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec.secretShares) &&
        Objects.equals(this.secretThreshold, comGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec.secretThreshold) &&
        Objects.equals(this.storeRootToken, comGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec.storeRootToken) &&
        Objects.equals(this.vaultCASecret, comGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec.vaultCASecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insecureTLS, mode, overwriteExisting, retryPeriodSeconds, secretShares, secretThreshold, storeRootToken, vaultCASecret);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComGithubKubevaultOperatorApisCoreV1alpha1UnsealerSpec {\n");
    
    sb.append("    insecureTLS: ").append(toIndentedString(insecureTLS)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    overwriteExisting: ").append(toIndentedString(overwriteExisting)).append("\n");
    sb.append("    retryPeriodSeconds: ").append(toIndentedString(retryPeriodSeconds)).append("\n");
    sb.append("    secretShares: ").append(toIndentedString(secretShares)).append("\n");
    sb.append("    secretThreshold: ").append(toIndentedString(secretThreshold)).append("\n");
    sb.append("    storeRootToken: ").append(toIndentedString(storeRootToken)).append("\n");
    sb.append("    vaultCASecret: ").append(toIndentedString(vaultCASecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

